apiVersion: apps/v1 # Do not change this
kind: Deployment
metadata:
  name: mlops-deployment # Name of deployment
  labels:
    app: mlops
spec:
  replicas: 2 # Two replicated pods are created for this application
  selector:
    matchLabels:
      app: mlops # k-v tags of pods to manage
  template: # Template of each pod
    metadata: # Metadata of pod
      labels:
        app: mlops #The pods are tagged with this k-v, by which they are found, and managed
    spec:
      containers:
        - name: mlops-app
          image: mlops-webapp:1
          # image: 879444378775.dkr.ecr.us-east-1.amazonaws.com/mlops-webapp:v0.2.22
          ports:
          - containerPort: 5001
# The deployment yaml is used to deploy the application to clusters. 
# It describes a desired state which is managed and monitored by the deployment controller.
# The controller adds a third part to this deployment yaml called 'status' where etcd details 
# are written out and monitored against 'spec'.
---
apiVersion: v1 # Do not change this
kind: Service
metadata:
  name: mlops-service
  labels:
    app: mlops
spec:
  # type: LoadBalancer
  selector:
    app: mlops # Pods tagged app:mlops are exposed to the network
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5001
    # nodePort: 30000 # LoadBalancer makes the cluster available via a port in the localhost
    # LoadBalancer does not work properly in docker desktop, hence not accessible through nodePort
# Service yaml is used to deploy an app running in pods to the network.
# This enables clients to interact with the app.
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlops-ingress
  labels:
    app: mlops
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: mlopsopt.in
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlops-service
            port:
              number: 80